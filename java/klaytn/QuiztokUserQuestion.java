package com.quiztok;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crypto.KlayCredentials;
import com.klaytn.caver.methods.response.KlayLogs;
import com.klaytn.caver.methods.response.KlayTransactionReceipt;
import com.klaytn.caver.tx.SmartContract;
import com.klaytn.caver.tx.manager.TransactionManager;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated smart contract code.
 * <p><strong>Do not modify!</strong>
 */
public class QuiztokUserQuestion extends SmartContract {
    private static final String BINARY = "";

    public static final String FUNC_GETQUESTIONIDBYINFO = "getQuestionIdByInfo";

    public static final String FUNC_GETUSERQUESTION = "getUserQuestion";

    public static final String FUNC_GETUSERQUESTIONCOUNT = "getUserQuestionCount";

    public static final String FUNC_GETUSERQUESTIONHISTORYRECORD = "getUserQuestionHistoryRecord";

    public static final String FUNC_GETUSERQUESTIONHISTORYRECORDCOUNT = "getUserQuestionHistoryRecordCount";

    public static final String FUNC_GETUSERQUESTIONHISTORYRECORDTOTALCOUNT = "getUserQuestionHistoryRecordTotalCount";

    public static final String FUNC_GETUSERQUESTIONRELEVANT = "getUserQuestionRelevant";

    public static final String FUNC_GETUSERQUESTIONTOTALCOUNT = "getUserQuestionTotalCount";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REGISTERUSERQUESTION = "registerUserQuestion";

    public static final String FUNC_USERQUESTIONSTATUSHISTORYRECORD = "userQuestionStatusHistoryRecord";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected QuiztokUserQuestion(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    protected QuiztokUserQuestion(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public RemoteCall<Tuple2<String, BigInteger>> getQuestionIdByInfo(String _questionId) {
        final Function function = new Function(FUNC_GETQUESTIONIDBYINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_questionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<String, String, String, String, String, String, String>> getUserQuestion(String _wallet, BigInteger _num) {
        final Function function = new Function(FUNC_GETUSERQUESTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_wallet), 
                new org.web3j.abi.datatypes.generated.Uint256(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<String, String, String, String, String, String, String>>(
                new Callable<Tuple7<String, String, String, String, String, String, String>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUserQuestionCount(String _wallet) {
        final Function function = new Function(FUNC_GETUSERQUESTIONCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_wallet)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<String, String>> getUserQuestionHistoryRecord(BigInteger _num, String _wallet) {
        final Function function = new Function(FUNC_GETUSERQUESTIONHISTORYRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num), 
                new org.web3j.abi.datatypes.Utf8String(_wallet)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<String, String>>(
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUserQuestionHistoryRecordCount(String _wallet) {
        final Function function = new Function(FUNC_GETUSERQUESTIONHISTORYRECORDCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_wallet)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getUserQuestionHistoryRecordTotalCount() {
        final Function function = new Function(FUNC_GETUSERQUESTIONHISTORYRECORDTOTALCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<String, String, String>> getUserQuestionRelevant(String _wallet, BigInteger _num) {
        final Function function = new Function(FUNC_GETUSERQUESTIONRELEVANT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_wallet), 
                new org.web3j.abi.datatypes.generated.Uint256(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUserQuestionTotalCount() {
        final Function function = new Function(FUNC_GETUSERQUESTIONTOTALCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> registerUserQuestion(BigInteger _num, String _wallet, String _subject, String _subjectUrl, String _option1, String _option2, String _option3, String _option4, String _answer, String _contentType, String _questionType, String _answerType) {
        final Function function = new Function(
                FUNC_REGISTERUSERQUESTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num), 
                new org.web3j.abi.datatypes.Utf8String(_wallet), 
                new org.web3j.abi.datatypes.Utf8String(_subject), 
                new org.web3j.abi.datatypes.Utf8String(_subjectUrl), 
                new org.web3j.abi.datatypes.Utf8String(_option1), 
                new org.web3j.abi.datatypes.Utf8String(_option2), 
                new org.web3j.abi.datatypes.Utf8String(_option3), 
                new org.web3j.abi.datatypes.Utf8String(_option4), 
                new org.web3j.abi.datatypes.Utf8String(_answer), 
                new org.web3j.abi.datatypes.Utf8String(_contentType), 
                new org.web3j.abi.datatypes.Utf8String(_questionType), 
                new org.web3j.abi.datatypes.Utf8String(_answerType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> userQuestionStatusHistoryRecord(BigInteger _num, String _wallet, String _questionId, String _status) {
        final Function function = new Function(
                FUNC_USERQUESTIONSTATUSHISTORYRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num), 
                new org.web3j.abi.datatypes.Utf8String(_wallet), 
                new org.web3j.abi.datatypes.Utf8String(_questionId), 
                new org.web3j.abi.datatypes.Utf8String(_status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static QuiztokUserQuestion load(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return new QuiztokUserQuestion(contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    public static QuiztokUserQuestion load(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new QuiztokUserQuestion(contractAddress, caver, transactionManager, contractGasProvider);
    }

    public static RemoteCall<QuiztokUserQuestion> deploy(Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(QuiztokUserQuestion.class, caver, credentials, chainId, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<QuiztokUserQuestion> deploy(Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(QuiztokUserQuestion.class, caver, transactionManager, contractGasProvider, BINARY, "");
    }

    public static class OwnershipTransferredEventResponse {
        public KlayLogs.Log log;

        public String previousOwner;

        public String newOwner;
    }
}
